#include <SDL.h>
#undef main
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <string.h>
#include "SDL_opengl.h"

//função da colisão
//bloco1 - inimigo
//bloco2 - personagem
bool colisao(float bloco1X, float bloco1Y, float bloco1Comp, float bloco1Alt, float bloco2X, float bloco2Y, float bloco2comp, float bloco2alt)
{
    if(bloco1Y+bloco1Alt < bloco2Y)
        return false;
    else if(bloco1Y > bloco2Y+bloco2alt)
        return false;
    else if(bloco1X+bloco1Comp < bloco2X)
        return false;
    else if(bloco1X > bloco2X+bloco2comp)
        return false;

    return true;
}

int main(int argc, char *argv[])
{

//------------inicio dos processos iniciais para criação da janela e definição de atributos--------------------------------------------//
	//inicializa tudo
	SDL_Init(SDL_INIT_EVERYTHING);

    glDisable(GL_BLEND);

    //diminuindo o uso da memória
    SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
    SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

    //criando janela, definindo tamanho, cor e mostrando porç~çao da janela

    SDL_WM_SetCaption("jogo extra", NULL);

    SDL_SetVideoMode(600, 400, 32, SDL_OPENGL);

    glClearColor(1, 1, 1, 0);

    glViewport(0, 0, 600, 400);


    //sombreamento da janela

    glShadeModel(GL_SMOOTH);

    //2d
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity(); //desenhos geometricos;

    //3d - disabilitar
    glDisable(GL_DEPTH_TEST);


    //-----lógica-----//
    bool executando = true;

    SDL_Event click;

    //variaveis do personagem
    float posX = 300;
    float posY = 350;
    float compr = 50;
    float altur = 50;

    //variaveis do inimigo

    float posX1 = 50;
    float posY1 = 50;
    float compr1 = 50;
    float altur1 = 50;

    bool esq = false;
    bool dir = false;

    float velX = 8;
    float velY = 8;

    while(executando)
    {
        //eventos
        while (SDL_PollEvent(&click))
        {
            if(click.type == SDL_QUIT)
            {
                executando = false;
            }
            if (click.type == SDL_KEYDOWN && click.key.keysym.sym == SDLK_ESCAPE)
            {
                executando = false;
            }
            if(click.type == SDL_KEYDOWN) // tecla é pressionada
            {
                if(click.key.keysym.sym == SDLK_a)
                {
                    esq = true;
                }
                else if(click.key.keysym.sym == SDLK_d)
                {
                    dir = true;
                }
            }
            else if(click.type == SDL_KEYUP) // tecla é solta
            {
                if(click.key.keysym.sym == SDLK_a)
                {
                    esq = false;
                }
                else if(click.key.keysym.sym == SDLK_d)
                {
                    dir = false;
                }
            }
        }

        //movimento do personagem
        if(esq == true)
        {
            posX-= 5;
        }
        else if(dir == true)
        {
            posX+= 5;
        }

        //logica do personagem

        if(posX < 0)
        {
            posX = 0;
        }
        else if(posX+altur > 600)
        {
            posX = 600 - compr;
        }
        else if(posY < 0)
        {
            posY = 0;
        }
        else if(posY+altur > 400)
        {
            posY = 400 - altur;
        }


        //movimento do inimigo
        posX1 += velX;
        posY1 += velY;

        //logica do inimigo
        if(posX1 < 0)
        {
            velX = -velX;
        }
        else if(posX1+altur1 > 600)
        {
            velX = -velX;
        }
        else if(posY1 < 0)
        {
            velY = -velY;
        }
        else if(posY1+altur1 > 400)
        {
            executando = false;
        }

        if(colisao(posX1, posY1, compr1, altur1, posX, posY, compr, altur) == true)
        {
            velY = -velY;
            velX = -velX;
        }

        //-----renderização------+//
        glClear(GL_COLOR_BUFFER_BIT); // limpa o buffer bit a bit

        //inicia matriz de desenho
        glPushMatrix();

        //dimenssões da matriz
        glOrtho(0, 600, 400, 0, -1, 1);

        //cores
        glColor3ub(255, 0, 0);

        //inicia o desenho do personagem
        glBegin(GL_QUADS);

        glVertex2f(posX, posY);
        glVertex2f(posX+compr, posY);
        glVertex2f(posX+compr, posY+altur);
        glVertex2f(posX, posY+altur);


        //termina o desenho do personagem
        glEnd();

        //inicia o desenho inimigo
        glBegin(GL_QUADS);
        glColor3ub(0, 0, 255);

        glVertex2f(posX1, posY1);
        glVertex2f(posX1+compr1, posY1);
        glVertex2f(posX1+compr1, posY1+altur1);
        glVertex2f(posX1, posY1+altur1);


        //termina o desenho do personagem
        glEnd();

        //fecha a matriz de desenho
        glPopMatrix();

        SDL_GL_SwapBuffers(); //usado para animações
    }


	SDL_Quit();

	return 0;
}
